# ========================================================
# BIBLIOTECAS QUE VAMOS USAR
# ========================================================
# pandas -> para criar e manipular tabelas de dados
# matplotlib -> para gerar gr√°ficos
# matplotlib_venn -> para criar os diagramas de Venn
# unicodedata -> para tratar acentos e mai√∫sculas/min√∫sculas
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib_venn import venn2, venn3
import matplotlib
import unicodedata

# Essa linha faz os gr√°ficos abrirem em uma janela separada
matplotlib.use('TkAgg')

# ========================================================
# 1. BASE DE DADOS
# ========================================================
# Aqui criamos uma "tabela" com os estados e quais ind√∫strias
# existem em cada um (Automobil√≠stica, T√™xtil e Petroqu√≠mica).
dados = {
    'Estado': [
        'S√£o Paulo', 'Minas Gerais', 'Rio de Janeiro', 'Rio Grande do Sul',
        'Paran√°', 'Santa Catarina', 'Bahia', 'Pernambuco', 'Cear√°', 'Amazonas'
    ],
    'Automobilistica': ['Sim', 'Sim', 'N√£o', 'Sim', 'Sim', 'N√£o', 'Sim', 'Sim', 'N√£o', 'N√£o'],
    'Textil': ['Sim'] * 10,  # todos os estados t√™m ind√∫stria t√™xtil
    'Petroquimica': ['Sim', 'N√£o', 'Sim', 'Sim', 'N√£o', 'N√£o', 'Sim', 'N√£o', 'N√£o', 'Sim']
}

# Converte o dicion√°rio para uma tabela (DataFrame do pandas)
df = pd.DataFrame(dados)

print("üìä DADOS DOS ESTADOS E IND√öSTRIAS:")
print(df.to_string(index=False))  # mostra a tabela de forma bonita no terminal

# ========================================================
# 2. CRIA√á√ÉO DOS CONJUNTOS
# ========================================================
# Cada ind√∫stria vai virar um conjunto (set), ou seja,
# um agrupamento de estados que t√™m aquela ind√∫stria.
A = set(df[df['Automobilistica'] == 'Sim']['Estado'])  # Automobil√≠stica
B = set(df[df['Textil'] == 'Sim']['Estado'])           # T√™xtil
C = set(df[df['Petroquimica'] == 'Sim']['Estado'])     # Petroqu√≠mica
U = set(df['Estado'])                                  # Universo = todos os estados

# Para deixar os diagramas mais limpos, vamos usar siglas
ufs = {
    'S√£o Paulo': 'SP', 'Minas Gerais': 'MG', 'Rio de Janeiro': 'RJ',
    'Rio Grande do Sul': 'RS', 'Paran√°': 'PR', 'Santa Catarina': 'SC',
    'Bahia': 'BA', 'Pernambuco': 'PE', 'Cear√°': 'CE', 'Amazonas': 'AM'
}

# ========================================================
# 3. FUN√á√ÉO PARA NORMALIZAR TEXTO
# ========================================================
# Essa fun√ß√£o serve para n√£o dar erro quando o usu√°rio digitar
# sem acento ou em min√∫sculo. Exemplo: "sao paulo" = "S√£o Paulo".
def _normaliza(txt: str) -> str:
    s = unicodedata.normalize('NFKD', txt)
    s = ''.join(c for c in s if not unicodedata.combining(c))  # tira acentos
    s = ' '.join(s.lower().split())  # deixa min√∫sculo e remove espa√ßos extras
    return s

# ========================================================
# 4. FUN√á√ÉO DE PERGUNTA (O QUIZ)
# ========================================================
# Essa fun√ß√£o faz uma pergunta, pede a resposta do usu√°rio,
# e s√≥ avan√ßa quando ele acertar.
def pergunta(titulo, enunciado, resposta_correta, explicacao):
    print(f"\nüî∂ {titulo}")
    print(enunciado)

    if isinstance(resposta_correta, set):  # quando a resposta √© um conjunto de estados
        gabarito = {_normaliza(x) for x in resposta_correta}
        while True:
            raw = input("Sua resposta (separe por v√≠rgulas): ").strip()
            tokens = [t for t in raw.replace(';', ',').split(',') if t.strip()]
            resposta_usuario = {_normaliza(t) for t in tokens}
            if resposta_usuario == gabarito:
                print("‚úÖ Correto!")
                print(explicacao)
                break
            else:
                print("‚ùå Incorreto! Tente novamente...")
    else:  # quando a resposta √© "sim" ou "n√£o"
        gabarito = _normaliza(str(resposta_correta))
        while True:
            raw = input("Sua resposta: ").strip()
            if _normaliza(raw) == gabarito:
                print("‚úÖ Correto!")
                print(explicacao)
                break
            else:
                print("‚ùå Incorreto! Tente novamente...")

# ========================================================
# 5. FUN√á√ïES PARA DESENHAR DIAGRAMAS
# ========================================================
def diagrama_venn2(conj1, conj2, nome1, nome2, titulo):
    """Mostra um diagrama de Venn de 2 conjuntos, com as siglas dos estados"""
    plt.figure(figsize=(8, 6))
    only1, only2, both = conj1 - conj2, conj2 - conj1, conj1 & conj2
    venn = venn2(subsets=(len(only1), len(only2), len(both)),
                 set_labels=(nome1, nome2))

    # Substitui os n√∫meros pelas siglas (UFs)
    if venn.get_label_by_id('10'):
        venn.get_label_by_id('10').set_text('\n'.join(sorted([ufs[e] for e in only1])))
    if venn.get_label_by_id('01'):
        venn.get_label_by_id('01').set_text('\n'.join(sorted([ufs[e] for e in only2])))
    if venn.get_label_by_id('11'):
        venn.get_label_by_id('11').set_text('\n'.join(sorted([ufs[e] for e in both])))

    plt.title(titulo, fontsize=14)
    plt.show()

def diagrama_final():
    """Mostra o diagrama de Venn com os 3 conjuntos (A, B e C)"""
    plt.figure(figsize=(12, 8))
    venn = venn3([A, B, C],
                 set_labels=('Automobil√≠stica (A)', 'T√™xtil (B)', 'Petroqu√≠mica (C)'))

    # Preenche cada parte com as siglas
    if venn.get_label_by_id('100'):
        venn.get_label_by_id('100').set_text('\n'.join(sorted([ufs[e] for e in A - B - C])))
    if venn.get_label_by_id('010'):
        venn.get_label_by_id('010').set_text('\n'.join(sorted([ufs[e] for e in B - A - C])))
    if venn.get_label_by_id('001'):
        venn.get_label_by_id('001').set_text('\n'.join(sorted([ufs[e] for e in C - A - B])))
    if venn.get_label_by_id('110'):
        venn.get_label_by_id('110').set_text('\n'.join(sorted([ufs[e] for e in (A & B) - C])))
    if venn.get_label_by_id('101'):
        venn.get_label_by_id('101').set_text('\n'.join(sorted([ufs[e] for e in (A & C) - B])))
    if venn.get_label_by_id('011'):
        venn.get_label_by_id('011').set_text('\n'.join(sorted([ufs[e] for e in (B & C) - A])))
    if venn.get_label_by_id('111'):
        venn.get_label_by_id('111').set_text('\n'.join(sorted([ufs[e] for e in A & B & C])))

    plt.title("Diagrama de Venn Final - Estados por Ind√∫strias", fontsize=14)
    plt.show()

# ========================================================
# 6. PERGUNTAS DO TRABALHO
# ========================================================
# Agora vem as perguntas exigidas no enunciado.
# O programa s√≥ avan√ßa se o usu√°rio acertar cada uma.

# 1. Uni√£o
pergunta(
    "Pergunta 1 - Uni√£o",
    "Quais estados pertencem a A ‚à™ C (Automobil√≠stica OU Petroqu√≠mica)?",
    A | C,
    f"A ‚à™ C = {A | C}"
)
diagrama_venn2(A, C, "Automobil√≠stica", "Petroqu√≠mica", "Uni√£o A ‚à™ C")

# 2. Interse√ß√£o
pergunta(
    "Pergunta 2 - Interse√ß√£o",
    "Quais estados pertencem a A ‚à© B (Automobil√≠stica E T√™xtil)?",
    A & B,
    f"A ‚à© B = {A & B}"
)
diagrama_venn2(A, B, "Automobil√≠stica", "T√™xtil", "Interse√ß√£o A ‚à© B")

# 3. Diferen√ßa
pergunta(
    "Pergunta 3 - Diferen√ßa",
    "Quais estados pertencem a B - C (T√™xtil mas N√ÉO Petroqu√≠mica)?",
    B - C,
    f"B - C = {B - C}"
)
diagrama_venn2(B, C, "T√™xtil", "Petroqu√≠mica", "Diferen√ßa B - C")

# 4. Complementar
pergunta(
    "Pergunta 4 - Complementar",
    "Quais estados pertencem ao complementar de A (A')?",
    U - A,
    f"A' = {U - A}"
)

# 5. Subconjunto
sul = {"Rio Grande do Sul", "Paran√°", "Santa Catarina"}
pergunta(
    "Pergunta 5 - Subconjunto",
    "O conjunto dos estados do Sul que t√™m T√™xtil √© subconjunto de B?",
    sul & B,
    f"Sul ‚à© B = {sul & B} ‚äÜ B"
)

# 6. Pertin√™ncia
pergunta(
    "Pergunta 6 - Pertin√™ncia",
    "O estado 'S√£o Paulo' pertence ao conjunto C (Petroqu√≠mica)? (sim/n√£o)",
    "sim" if "S√£o Paulo" in C else "n√£o",
    f"S√£o Paulo {'‚àà' if 'S√£o Paulo' in C else '‚àâ'} C"
)

# ========================================================
# 7. DIAGRAMA FINAL
# ========================================================
# Por √∫ltimo, mostramos o diagrama de Venn com os 3 conjuntos juntos.
diagrama_final()
